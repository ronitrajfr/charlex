// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Visibility {
    Public
    Private
}

enum MessageRole {
  USER
  ASSISTANT
  TOOL
  SYSTEM
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    threads      Thread[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Thread {
    id            String     @id @default(cuid())
    title         String     @default("New Chat")
    updatedAt     DateTime   @updatedAt
    createdAt     DateTime   @default(now())
    createdBy     User       @relation(fields: [userId], references: [id])
    userId        String
    pinned        Boolean    @default(false)
    visibility    Visibility  @default(Private)    
    messages      Message[]
    streams       Stream[]

    @@index([userId])
    @@index([userId, updatedAt])
    @@index([visibility])
}

model Message {
  id          String      @id @default(cuid())
  threadId      String
  role        MessageRole
  content     Json        
  attachments Json        @default("[]") // File attachments
  createdAt   DateTime    @default(now())
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([threadId, createdAt])
}

model Stream {
  id        String   @id @default(cuid())
  threadId    String
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  @@index([threadId])
  @@index([threadId, isActive])
}

